import requests
import json

env_url = "https://<your-environment-id>.live.dynatrace.com"  # Replace with your Dynatrace URL
api_token = "<your-api-token>"  # Replace with your API token

def get_management_zone_mapping():
    endpoint = f"{env_url}/api/v2/settings/objects"
    headers = {"Authorization": f"Api-Token {api_token}"}
    params = {
        "schemaIds": "builtin:management.zone",
        "fields": "objectId,value"  # Fetch only required fields
    }
    all_items = []
    next_page_key = None

    while True:
        if next_page_key:
            params["nextPageKey"] = next_page_key
        else:
            params.pop("nextPageKey", None)  # Remove key if not needed
        
        response = requests.get(endpoint, headers=headers, params=params)
        response.raise_for_status()  # Check for HTTP errors
        
        data = response.json()
        all_items.extend(data.get("items", []))
        
        next_page_key = data.get("nextPageKey")
        if not next_page_key:
            break

    # Map objectId to management zone ID
    mz_mapping = {}
    for item in all_items:
        object_id = item["objectId"]
        try:
            # 'value' is a dictionary; extract the 'id' field
            mz_id = item["value"]["id"]
            mz_mapping[object_id] = mz_id
        except KeyError:
            print(f"Warning: 'id' not found for objectId {object_id}. Skipping.")
    
    return mz_mapping

# Example Usage
if __name__ == "__main__":
    mapping = get_management_zone_mapping()
    print("Mapping of objectId to Management Zone ID:")
    for obj_id, mz_id in mapping.items():
        print(f"objectId {obj_id} -> Management Zone ID {mz_id}")
